// File: main.v
// Generated by MyHDL 1.0dev
// Date: Sat Oct 31 19:14:33 2015


`timescale 1ns/10ps

module main (
    inclk,
    rst,
    mosi,
    sclk,
    spi_rst,
    dclka,
    Aa,
    Ba,
    Ca,
    Da,
    R1a,
    B1a,
    G1a,
    R2a,
    B2a,
    G2a,
    latcha,
    OEa,
    dclkb,
    Ab,
    Bb,
    Cb,
    Db,
    R1b,
    B1b,
    G1b,
    R2b,
    B2b,
    G2b,
    latchb,
    OEb
);


input inclk;
input rst;
input mosi;
input sclk;
input spi_rst;
output dclka;
wire dclka;
output Aa;
reg Aa;
output Ba;
reg Ba;
output Ca;
reg Ca;
output Da;
reg Da;
output R1a;
reg R1a;
output B1a;
reg B1a;
output G1a;
reg G1a;
output R2a;
reg R2a;
output B2a;
reg B2a;
output G2a;
reg G2a;
output latcha;
reg latcha;
output OEa;
reg OEa;
output dclkb;
wire dclkb;
output Ab;
reg Ab;
output Bb;
reg Bb;
output Cb;
reg Cb;
output Db;
reg Db;
output R1b;
reg R1b;
output B1b;
reg B1b;
output G1b;
reg G1b;
output R2b;
reg R2b;
output B2b;
reg B2b;
output G2b;
reg G2b;
output latchb;
reg latchb;
output OEb;
reg OEb;

reg clk;
reg [5:0] db_which_col;
reg [3:0] db_which_row;
reg [47:0] db_next_colors;
reg [7:0] db_pwm_ctr;
reg [5:0] db_next_col;
reg [3:0] db_next_row;
reg [5:0] da_which_col;
reg [3:0] da_which_row;
reg [47:0] da_next_colors;
reg [7:0] da_pwm_ctr;
reg [5:0] da_next_col;
reg [3:0] da_next_row;
reg [5:0] rs_minor_idx;
reg [46:0] rs_buf;
reg [10:0] rs_major_idx;

reg [47:0] img [0:2048-1];




always @(posedge sclk, negedge spi_rst) begin: MAIN_RS_RX
    if ((!spi_rst)) begin
        rs_minor_idx <= 0;
        rs_major_idx <= 0;
    end
    else begin
        if (($signed({1'b0, rs_minor_idx}) >= (48 - 1))) begin
            img[rs_major_idx] <= {mosi, rs_buf};
            rs_major_idx <= (rs_major_idx + 1);
            rs_minor_idx <= 0;
        end
        else begin
            rs_buf[rs_minor_idx] <= mosi;
            rs_minor_idx <= (rs_minor_idx + 1);
        end
    end
end


always @(posedge clk, negedge rst) begin: MAIN_DA_DISP
    OEa <= 1'b0;
    if ((!rst)) begin
        da_next_row <= 1;
        da_next_col <= 1;
        da_which_row <= 0;
        da_which_col <= 0;
        da_pwm_ctr <= 0;
    end
    else begin
        R1a <= (da_next_colors[(1 * 8)-1:(0 * 8)] > da_pwm_ctr);
        G1a <= (da_next_colors[(2 * 8)-1:(1 * 8)] > da_pwm_ctr);
        B1a <= (da_next_colors[(3 * 8)-1:(2 * 8)] > da_pwm_ctr);
        R2a <= (da_next_colors[(4 * 8)-1:(3 * 8)] > da_pwm_ctr);
        G2a <= (da_next_colors[(5 * 8)-1:(4 * 8)] > da_pwm_ctr);
        B2a <= (da_next_colors[(6 * 8)-1:(5 * 8)] > da_pwm_ctr);
        da_next_colors <= img[((0 + (da_next_row * 64)) + da_next_col)];
        latcha <= ($signed({1'b0, da_which_col}) == (64 - 1));
        da_which_col <= da_next_col;
        da_which_row <= da_next_row;
        if (($signed({1'b0, da_next_col}) >= (64 - 1))) begin
            da_next_col <= 0;
            Aa <= da_which_row[0];
            Ba <= da_which_row[1];
            Ca <= da_which_row[2];
            Da <= da_which_row[3];
            if (($signed({1'b0, da_next_row}) >= ((32 / 2) - 1))) begin
                da_next_row <= 0;
                if (($signed({1'b0, da_pwm_ctr}) >= (255 - 1))) begin
                    da_pwm_ctr <= 0;
                end
                else begin
                    da_pwm_ctr <= (da_pwm_ctr + 1);
                end
            end
            else begin
                da_next_row <= (da_next_row + 1);
            end
        end
        else begin
            da_next_col <= (da_next_col + 1);
        end
    end
end



assign dclka = (!clk);


always @(posedge clk, negedge rst) begin: MAIN_DB_DISP
    OEb <= 1'b0;
    if ((!rst)) begin
        db_next_row <= 1;
        db_next_col <= 1;
        db_which_row <= 0;
        db_which_col <= 0;
        db_pwm_ctr <= 0;
    end
    else begin
        R1b <= (db_next_colors[(1 * 8)-1:(0 * 8)] > db_pwm_ctr);
        G1b <= (db_next_colors[(2 * 8)-1:(1 * 8)] > db_pwm_ctr);
        B1b <= (db_next_colors[(3 * 8)-1:(2 * 8)] > db_pwm_ctr);
        R2b <= (db_next_colors[(4 * 8)-1:(3 * 8)] > db_pwm_ctr);
        G2b <= (db_next_colors[(5 * 8)-1:(4 * 8)] > db_pwm_ctr);
        B2b <= (db_next_colors[(6 * 8)-1:(5 * 8)] > db_pwm_ctr);
        db_next_colors <= img[((1024 + (db_next_row * 64)) + db_next_col)];
        latchb <= ($signed({1'b0, db_which_col}) == (64 - 1));
        db_which_col <= db_next_col;
        db_which_row <= db_next_row;
        if (($signed({1'b0, db_next_col}) >= (64 - 1))) begin
            db_next_col <= 0;
            Ab <= db_which_row[0];
            Bb <= db_which_row[1];
            Cb <= db_which_row[2];
            Db <= db_which_row[3];
            if (($signed({1'b0, db_next_row}) >= ((32 / 2) - 1))) begin
                db_next_row <= 0;
                if (($signed({1'b0, db_pwm_ctr}) >= (255 - 1))) begin
                    db_pwm_ctr <= 0;
                end
                else begin
                    db_pwm_ctr <= (db_pwm_ctr + 1);
                end
            end
            else begin
                db_next_row <= (db_next_row + 1);
            end
        end
        else begin
            db_next_col <= (db_next_col + 1);
        end
    end
end



assign dclkb = (!clk);


always @(posedge inclk) begin: MAIN_CD_DIVIDE
    reg [1-1:0] count;
    if (($signed({1'b0, count}) < (1 - 1))) begin
        count <= (count + 1);
    end
    else begin
        clk <= (!clk);
        count <= 0;
    end
end

endmodule
